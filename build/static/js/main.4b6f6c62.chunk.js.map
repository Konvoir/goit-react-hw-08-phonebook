{"version":3,"sources":["components/Contacts/Contacts.module.css","components/Filter/Filter.module.css","redux/actions.js","services/APIbase.js","redux/operations.js","redux/selectors.js","components/Contacts/Contacts.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","App.js","redux/reducers.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","fetchContactsAPI","a","axios","get","data","addContactAPI","contact","post","deleteContactAPI","id","delete","defaults","baseURL","getFilter","state","contacts","filter","getVisibleContacts","createSelector","items","name","toLowerCase","includes","Contacts","contactsItem","useSelector","dispatch","useDispatch","useEffect","className","s","list","map","item","text","number","btn","type","onClick","Form","useState","setName","setNumber","handleInput","event","currentTarget","value","reset","onSubmit","preventDefault","gettingData","addingContact","form","label","input","onChange","pattern","title","required","Filter","wrapper","e","target","App","createReducer","_","payload","error","action","window","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b6f6c62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contacts_item__RKIFY\",\"text\":\"Contacts_text__12lqH\",\"btn\":\"Contacts_btn__2dumG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__16UAM\",\"label\":\"Filter_label__77Ae1\",\"input\":\"Filter_input__10Vul\"};","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContactsRequest = createAction(\"contacts/fetchRequest\");\nexport const fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\nexport const fetchContactsError = createAction(\"contacts/fetchError\");\n\nexport const addContactRequest = createAction(\"contacts/addRequest\");\nexport const addContactSuccess = createAction(\"contacts/faddSuccess\");\nexport const addContactError = createAction(\"contacts/addError\");\n\nexport const deleteContactRequest = createAction(\"contacts/deleteRequest\");\nexport const deleteContactSuccess = createAction(\"contacts/deleteSuccess\");\nexport const deleteContactError = createAction(\"contacts/deleteError\");\n\n// export const deleteContact = createAction(\"contacts/delete\");\nexport const filterContacts = createAction(\"contacts/filterContacts\");\n","import axios from \"axios\";\n\naxios.defaults.baseURL = \"http://localhost:3000\";\n\nexport async function fetchContactsAPI() {\n  const { data } = await axios.get(\"/contacts\");\n  return data;\n}\n\nexport async function addContactAPI(contact) {\n  const { data } = await axios.post(`/contacts`, contact);\n  return data;\n}\n\nexport async function deleteContactAPI(id) {\n  await axios.delete(`/contacts/${id}`);\n}\n","import {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from \"./actions\";\n\nimport {\n  addContactAPI,\n  deleteContactAPI,\n  fetchContactsAPI,\n} from \"../services/APIbase\";\n\nexport const fetchContacts = () => async (dispatch) => {\n  dispatch(fetchContactsRequest());\n  try {\n    const contacts = await fetchContactsAPI();\n    dispatch(fetchContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nexport const addContact = (contact) => async (dispatch) => {\n  dispatch(addContactRequest());\n  const gettingData = await fetchContactsAPI();\n  if (gettingData) {\n    const nameArray = gettingData.map((item) => item.name);\n    const alreadyInContacts = nameArray.includes(contact.name);\n    if (!alreadyInContacts) {\n      try {\n        const addingContact = await addContactAPI(contact);\n        dispatch(addContactSuccess(addingContact));\n      } catch (error) {\n        dispatch(addContactError(error));\n      }\n    } else {\n      dispatch(addContactError(`${contact.name} is already in contacts`));\n    }\n  }\n};\n\nexport const deleteContacts = (id) => async (dispatch) => {\n  dispatch(deleteContactRequest());\n  try {\n    await deleteContactAPI(id);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n","import { createSelector } from \"reselect\";\n\nexport const getItems = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\nexport const getVisibleContacts = createSelector(\n  [getItems, getFilter],\n  (items, filter) => {\n    return items.filter(({ name }) => name.toLowerCase().includes(filter));\n  }\n);\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { deleteContacts, fetchContacts } from '../../redux/operations';\r\nimport { getVisibleContacts } from '../../redux/selectors';\r\nimport s from './Contacts.module.css';\r\n\r\nexport default function Contacts() {\r\n    const contactsItem = useSelector(getVisibleContacts);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n\r\n    if (contactsItem) {\r\n        return (\r\n            <ul className={s.list}>\r\n                {contactsItem.map(item => (\r\n                    <li key={item.id} className={s.item}>\r\n                        <p className={s.text}>\r\n                            {item.name}: {item.number}\r\n                        </p>\r\n                        <button\r\n                            className={s.btn}\r\n                            type=\"button\"\r\n                            onClick={() => dispatch(deleteContacts(item.id))}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n    return;\r\n}","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addContact } from '../../redux/operations';\r\nimport s from './Form.module.css';\r\n\r\nexport default function Form() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleInput = event => {\r\n        const { name, value } = event.currentTarget;\r\n        if (name === 'name') {\r\n            setName(value);\r\n        } else if (name === 'number') {\r\n            setNumber(value);\r\n        }\r\n    };\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        dispatch(\r\n            addContact({\r\n                name,\r\n                number,\r\n            }),\r\n        );\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.form}>\r\n            <label className={s.label}>\r\n                Name\r\n                <input\r\n                    className={s.input}\r\n                    value={name}\r\n                    onChange={handleInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={s.label}>\r\n                Number\r\n                <input\r\n                    className={s.input}\r\n                    value={number}\r\n                    onChange={handleInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n            </label>\r\n            <button type=\"submit\" className={s.btn}>\r\n                Add to contacts\r\n            </button>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { filterContacts } from '../../redux/actions';\r\nimport { getFilter } from '../../redux/selectors';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n    const value = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <label className={s.label}>\r\n                Find contacts by name\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    name=\"filter\"\r\n                    value={value}\r\n                    onChange={e => dispatch(filterContacts(e.target.value))}\r\n                ></input>\r\n            </label>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\nimport Contacts from \"./components/Contacts/Contacts\";\nimport Form from \"./components/Form/Form\";\nimport Filter from \"./components/Filter/Filter\";\n\nexport default function App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts />\n    </>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  filterContacts,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from \"./actions\";\n\n// const contactsInitialState = {\n//   items: [],\n//   filter: \"\",\n// };\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => {\n    return payload;\n  },\n  [addContactSuccess]: (state, { payload }) => {\n    return [...state, payload];\n  },\n  [deleteContactSuccess]: (state, { payload }) => {\n    return state.filter(({ id }) => id !== payload);\n  },\n});\n\nconst filter = createReducer(\"\", {\n  [filterContacts]: (_, { payload }) => {\n    return payload.toLowerCase();\n  },\n});\n\nconst error = createReducer(null, {\n  [addContactError]: (_, action) => window.alert(action.payload),\n  [deleteContactError]: (_, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport contactsReducer from \"./reducers\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={\"L O A D I N G\"} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3WcyR\",\"label\":\"Form_label___0nTG\",\"input\":\"Form_input__1ySH3\",\"btn\":\"Form_btn__ONpSk\"};"],"sourceRoot":""}